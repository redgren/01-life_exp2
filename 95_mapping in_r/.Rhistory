crime %>%
filter(METHOD != "others") %>%
group_by(WARD, METHOD) %>%
count() %>%
left_join(wards) %>%
ggplot(aes(fill = n)) +
geom_sf(aes(geometry = geometry),color = NA) +
coord_sf(crs = 26915) +
scale_fill_viridis_c() +
facet_wrap(~METHOD) +
geom_sf(data = au_latlong, size = 4, shape = 23, fill = "red")
dc_median %>%
ggplot(aes(fill = estimate)) +
geom_sf(aes(geometry = geometry),color = NA) +
coord_sf(crs = 26915) +
scale_fill_viridis_c() +
geom_sf(data = au_latlong, size = 4, shape = 23, fill = "red")
View(crime)
crime <- read_csv("./data/dc-crimes-search-results.csv", col_types = cols(DISTRICT = col_factor(),
WARD = col_factor(),
PSA = col_factor(),
METHOD= col_factor(),
CENSUS_TRACT = col_factor()
))
View(crime)
crime <- read_csv("./data/dc-crimes-search-results.csv", col_types = cols(DISTRICT = col_factor(),
WARD = col_factor(),
PSA = col_factor(),
METHOD= col_factor(),
CENSUS_TRACT = col_character()
))
View(crime)
crime <- read_csv("./data/dc-crimes-search-results.csv", col_types = cols(DISTRICT = col_factor(),
WARD = col_factor(),
PSA = col_factor(),
METHOD= col_factor(),
CENSUS_TRACT = col_character()
))
crime <- read_csv("./data/dc-crimes-search-results.csv", col_types = cols(DISTRICT = col_factor(),
WARD = col_factor(),
PSA = col_factor(),
METHOD= col_factor(),
CENSUS_TRACT = col_character()
))
View(crime)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(janeaustenr)
library
library(gutenbergr)
library(tidyverse)
library(igraph)
library(ggraph)
library(tm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
unloadNamespace("tidytext")
unloadNamespace("tidygraph")
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$name)), " countries)"))
ggplot(data = world) +
geom_sf(aes(fill = pop_est)) +
scale_fill_viridis_c(option = "plasma", trans = "sqrt")
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
ggplot(data = world) +
geom_sf() +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico",
fontface = "italic", color = "grey22", size = 6) +
coord_sf(xlim = c(-97.15, -70.12), ylim = c(7.65, 30.97), expand = FALSE)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
unloadNamespace("gutenbergr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidytext)
library(janeaustenr)
austen_books() %>%
unnest_tokens(word, text) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(book, word, sort = TRUE) ->
book_words
book_words %>%
group_by(book) %>%
summarize(total = sum(n)) ->
total_words
book_words %>%
left_join(total_words) ->
book_words
book_words
book_words %>%
ggplot(aes(n/total, fill = book)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, .0009)+
facet_wrap(~book, ncol = 2, scales = "free")
book_words %>%
filter(n ==1) %>%
nrow()
book_words %>%
group_by(book) %>%
mutate(rank = row_number(),
term_frequency = n/total) ->
freq_by_rank
freq_by_rank
freq_by_rank %>%
ggplot(aes(rank, term_frequency, color = book)) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
freq_by_rank %>%
filter(rank < 500, rank > 10) ->
rank_subset
lmout <-  lm(log10(term_frequency) ~ log10(rank), data = rank_subset)
broom::tidy(lmout)[c(1,2,5)]
freq_by_rank %>%
ggplot(aes(rank, term_frequency, color = book)) +
geom_abline(intercept = -0.62, slope = -1.1, color = "red", linetype = 2) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
book_words %>% bind_tf_idf(word, book, n) ->
book_words
book_words
book_words %>%
select(-total) %>%
arrange(desc(tf_idf))
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
library(gutenbergr)
physics <- gutenberg_download(c(37729, 14725, 13476, 30155), meta_fields = "author")
physics %>%
unnest_tokens(word, text) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word, sort = TRUE) ->
physics_words
physics_words
physics_words %>%
bind_tf_idf(word, author, n) %>%
mutate(word = fct_reorder(word, tf_idf)) %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Tesla, Nikola",
"Einstein, Albert"))) ->
physics_plot
physics_plot %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip()
physics %>%
filter(str_detect(text, "RC")) %>%
select(text)
mystopwords <- tibble(word = c("eq", "co", "rc", "ac", "ak", "bn",
"fig", "file", "cg", "cb", "cm",
"ab"))
physics_words <- anti_join(physics_words, mystopwords,
by = "word")
plot_physics <- physics_words %>%
bind_tf_idf(word, author, n) %>%
mutate(word = str_remove_all(word, "_")) %>%
group_by(author) %>%
top_n(15, tf_idf) %>%
ungroup() %>%
mutate(word = reorder_within(word, tf_idf, author)) %>%
mutate(author = factor(author, levels = c("Galilei, Galileo",
"Huygens, Christiaan",
"Tesla, Nikola",
"Einstein, Albert")))
ggplot(plot_physics, aes(word, tf_idf, fill = author)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~author, ncol = 2, scales = "free") +
coord_flip() +
scale_x_reordered()
austen_books() %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) ->
austen_bigrams
austen_bigrams
austen_bigrams %>%
count(bigram, sort = TRUE)
austen_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")->
bigrams_separated
bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) ->
bigrams_filtered
# new bigram counts:
bigrams_filtered %>%
count(word1, word2, sort = TRUE)->
bigram_counts
bigram_counts
bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")->
bigrams_united
bigrams_united %>%
count(bigram, sort = TRUE)
bigrams_filtered %>%
filter(word2 == "street") %>%
count(book, word1, sort = TRUE)
#or
bigrams_united %>%
filter(str_detect(bigram,"street")) %>%
count(book, bigram, sort = TRUE)
bigrams_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf)) ->
bigram_tf_idf
bigram_tf_idf
bigram_tf_idf %>%
group_by(book) %>%
top_n(10, tf_idf) %>%
ungroup() %>%
mutate(bigram = reorder_within(bigram, tf_idf, book)) %>%
ggplot(aes(bigram, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip() +
scale_x_reordered()
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
AFINN <- get_sentiments("afinn")
AFINN
bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE) ->
not_words
not_words
not_words %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n * value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by \"not\"") +
ylab("Sentiment value * number of occurrences") +
coord_flip()
negation_words <- c("not", "no", "never", "without")
bigrams_separated %>%
filter(word1 %in% negation_words) %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word1, word2, value, sort = TRUE) ->
negated_words
negated_words %>%
mutate(contribution = n * value) %>%
group_by(word1) %>%
top_n(12, abs(contribution)) %>%
ungroup()  %>%
ggplot(aes(reorder_within(word2,contribution, word1), n * value,
fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by negation term") +
ylab("Sentiment value * Number of Occurrences") +
coord_flip() +
facet_wrap(~word1, scales = "free") +
scale_x_discrete(labels = function(x) str_replace(x,"__.+$", ""))
library(igraph)
bigram_counts
bigram_counts %>%
filter(n > 20) %>%
graph_from_data_frame()->
bigram_graph
bigram_graph
library(ggraph)
set.seed(17)
ggraph(bigram_graph, layout = "fr") + #The layout_with_fr() Fruchterman-Reingold layout
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)+
theme_void()
# With repel = TRUE
ggraph(bigram_graph, layout = "fr") + # layout_with_fr() uses the
# Fruchterman-Reingold layout
geom_edge_link() +
#geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1, repel = TRUE) +
theme_void()
library(tm)
data("AssociatedPress", package = "topicmodels")
AssociatedPress
ap_td <- tidy(AssociatedPress)
ap_td
ap_td %>%
inner_join(get_sentiments("bing"), by = c(term = "word"))->
ap_sentiments
ap_sentiments
ap_sentiments %>%
count(sentiment, term, wt = count) %>%
ungroup() %>%
filter(n >= 200) %>%
mutate(n = ifelse(sentiment == "negative", -n, n)) %>%
mutate(term = reorder(term, n)) %>%
ggplot(aes(term, n, fill = sentiment)) +
geom_bar(stat = "identity") +
ylab("Contribution to sentiment") +
coord_flip()
data("data_corpus_inaugural", package = "quanteda")
inaug_dfm <- quanteda::dfm(data_corpus_inaugural, verbose = FALSE)
inaug_dfm
inaug_td <- tidy(inaug_dfm)
inaug_td
inaug_tf_idf <- inaug_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
inaug_tf_idf
inaug_tf_idf %>%
filter(document %in% c("1861-Lincoln", "1933-Roosevelt","1961-Kennedy","2009-Obama")) %>%
mutate(term = str_extract(term, "[a-z']+")) %>%
group_by(document) %>%
arrange(desc(tf-idf)) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(x=reorder_within(term, tf_idf, document),
y=tf_idf, fill = document)) +
geom_col(show.legend = FALSE)+
facet_wrap(~document, scales = "free") +
coord_flip() +
scale_x_discrete(labels = function(x) str_replace(x,"__.+$", ""))
ap_td %>%
cast_dtm(document, term, count)
ap_td %>%
cast_dfm(document, term, count)
data("acq")
acq
acq_td <- tidy(acq)
acq_td
acq_tokens <- acq_td %>%
select(-places) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word")
# most common words
acq_tokens %>%
count(word, sort = TRUE)
# tf-idf
acq_tokens %>%
count(id, word) %>%
bind_tf_idf(word, id, n) %>%
arrange(desc(tf_idf))
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map",
subtitle = paste0("(", length(unique(world$name)), " countries)"))
world_points<- st_centroid(world)
world_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))
ggplot(data = world) +
geom_sf() +
geom_text(data= world_points,aes(x=X, y=Y, label=name),
color = "darkblue", fontface = "bold", check_overlap = FALSE) +
annotate(geom = "text", x = -90, y = 26, label = "Gulf of Mexico",
fontface = "italic", color = "grey22", size = 6) +
coord_sf(xlim = c(-97.15, -70.12), ylim = c(7.65, 30.97), expand = FALSE)
search()
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
unloadNamespace("gutenbergr")
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
search()
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
unloadNamespace("gutenbergr")
unloadNamespace("nlp")
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
search()
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
unloadNamespace("gutenbergr")
unloadNamespace("NLP")
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
search()
unloadNamespace("tidytext")
unloadNamespace("ggraph")
unloadNamespace("tidygraph")
unloadNamespace("igraph")
unloadNamespace("tm")
unloadNamespace("gutenbergr")
unloadNamespace("NLP")
unloadNamespace("janeaustenr")
search()
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(ggspatial)
library(sf)
library(lwgeom)
library(tidycensus)
library(tigris)
library(sf)
library(viridis) #a color palette
options(tigris_use_cache = TRUE)
crime <- read_csv("./data/dc-crimes-search-results.csv", col_types = cols(DISTRICT = col_factor(),
WARD = col_factor(),
PSA = col_factor(),
METHOD= col_factor(),
CENSUS_TRACT = col_character()
))
str(crime)
library(tidyverse)
library(NLP)
library(tidyverse)
library(igraph)
library(ggraph)
library(janeaustenr)
library(tm)
