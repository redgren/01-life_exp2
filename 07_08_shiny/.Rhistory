server <- function(input, output) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var)) +
geom_histogram(bins = 20)
})
}
shinyApp(ui = ui, server = server)
runApp('STAT-413-613/Lectures_All/07_shiny/07c1_demo_theme_css')
library(help = "fresh")
runApp('STAT-413-613/Lectures_All/07_shiny/07c1_demo_theme_css')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
wikixml <- read_html("https://en.wikipedia.org/wiki/Atlantic_hurricane_season")
wikidat <- html_nodes(wikixml, "table")
wikidat <- html_nodes(wikixml, "table")
tablist <- html_table(wikidat)
wikidat <- html_nodes(wikixml, "table")
tablist <- html_table(wikidat, fill = TRUE)
head(tablist)
view(tablist)
tablist[[4]]
tablist[[5]]
wikidat <- html_node(wikixml, "table")
class(wikidat)
tablist <- html_table(wikidat)
wikidat <- html_node(wikixml, "table")
class(wikidat)
tablist <- html_table(wikidat)
tablist[[4]]
tablist <- html_table(wikidat)
head(tablist)
tablist
wikixml <- read_html("https://en.wikipedia.org/wiki/Atlantic_hurricane_season")
wikidat <- html_node(wikixml, "table")
tablist <- html_table(wikidat)
tablist
length(tablist)
wikidat <- html_nodes(wikixml, "table")
tablist <- html_table(wikidat)
tablist <- html_table(wikidat, fill = TRUE)
length(tablist)
tablist[[4]]
mosque <- read_html("https://en.wikipedia.org/wiki/List_of_the_oldest_mosques")
headers <- html_nodes(mosque, css = "caption ,  #Mentioned_in_the_Quran")
tabnode <- html_nodes(mosque, css = "table.wikitable")
tablist <- html_table(tabnode, fill = TRUE)
view(tablist)
length(headers)
headers
headers <- html_text(html_nodes(mosque, css = "caption ,  #Mentioned_in_the_Quran"))
headers
view(tablist)
tab_names <- map(tablist, names)
head(tab_names)
(tab_names)
tablist[[18]] %>%
mutate(Country = "Russia") ->
tablist[[18]]
tab_names <- map(tablist, names)
(tab_names)
tablist[[13]]
names(tablist[[13]])[ncol(tablist[[13]])] <- "blah"
tab_names <- map(tablist, names)
(tab_names)
tablist
map(tablist, ~select(., Building, Country, fb = 'First built")) ->
tablist
map(tablist, ~select(., Building, Country, fb = "First built")) ->
tablist
str(tablist)
head(tablist[[4]])
head(tablist[[5]])
map(tablist, mutate(., fb = str_replace(fb, "th", "00"))) %>%
map(., ~mutate(., fb = str_extract(fb, "^\\d+"))) ->
tablist
map(tablist, ~mutate(., fb = str_replace(fb, "th", "00"))) %>%
map(., ~mutate(., fb = str_extract(fb, "^\\d+"))) ->
tablist
tablist[[5]]
head(headers)
head(headers)
str_replace_all(headers, "\\n", "")
head(headers)
str_replace_all(headers, "\\n", "") %>%
str_replace_all("\\(.+\\)", "")
head(headers)
str_replace_all(headers, "\\n", "") %>%
str_replace_all("\\(.+\\)", "")
#head(headers)
str_replace_all(headers, "\\n", "") %>%
str_replace_all("\\(.+\\)", "")
#head(headers)
str_replace_all(headers, "\\n", "") %>%
str_replace_all("\\(.+\\)", "") ->
tablist
for (index in seq_along(tablist)){
mutate(tablist[[index]], category = headers[[index]])->
tablist[[index]]
}
wikidat <- html_nodes(wikixml, "table")
tablist <- html_table(wikidat, fill = TRUE)
length(tablist)
tablist[[4]]
mosque <- read_html("https://en.wikipedia.org/wiki/List_of_the_oldest_mosques")
headers <- html_text(html_nodes(mosque, css = "caption ,  #Mentioned_in_the_Quran"))
tabnode <- html_nodes(mosque, css = "table.wikitable")
tablist <- html_table(tabnode, fill = TRUE)
length(tablist)
length(headers)
headers
view(tablist)
tab_names <- map(tablist, names)
tablist[[18]] %>%
mutate(Country = "Russia") ->
tablist[[18]]
names(tablist[[13]])[ncol(tablist[[13]])] <- "blah"
map(tablist, ~select(., Building, Country, fb = "First built")) ->
tablist
map(tablist, ~mutate(., fb = str_replace(fb, "th", "00"))) %>%
map(., ~mutate(., fb = str_extract(fb, "^\\d+"))) ->
tablist
#head(headers)
str_replace_all(headers, "\\n", "") %>%
str_replace_all("\\(.+\\)", "") ->
headers
for (index in seq_along(tablist)){
mutate(tablist[[index]], category = headers[[index]])->
tablist[[index]]
}
tablist[[5]]
bind_rows(tablist) ->
tabdf
head(tabdf)
head(tabdf, 15)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
runApp('STAT-413-613/Lectures_All/07_shiny/test_app')
runApp('STAT-413-613/Lectures_All/07_shiny/test_app')
runApp('STAT-413-613/Lectures_All/07_shiny/test_app')
runApp('STAT-413-613/Lectures_All/07_shiny/test_app')
runApp('STAT-413-613/Lectures_All/07_shiny/test_app')
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
passwordInput("password", "What's your password?"),
textAreaInput("story", "Tell me about yourself")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
passwordInput("password", "What's your password?"),
textAreaInput("story", "Tell me about yourself")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
numericInput("num", "Number one", value = 0, min = 0, max = 100),
sliderInput("num2", "Number two", value = 50, min = 0, max = 100),
sliderInput("rng", "Range", value = c(10, 20), min = 0, max = 100)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
dateInput("dob", "When were you born?"),
dateRangeInput("holiday", "When do you want to go on vacation next?")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
weekdays <- c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
ui <- fluidPage(
selectInput("state", "Where do you live?", choices = state.name),
radioButtons("weekday", "What's your favorite day of the week?", choices = weekdays),
checkboxGroupInput("weekday2", "What days do you work?", choices = weekdays)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
varSelectInput("carcol", "Which Column?", data = mtcars)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
varSelectInput("carcol", "Which Column?", data = mtcars, selected = "cyl")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
checkboxInput("startrek", "Like Star Trek?")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fileInput("filenames", "Which Files", multiple = FALSE)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
actionButton("click", "Click me!"),
actionLink("Link", "No, click me!")
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
textOutput("text"),
verbatimTextOutput("code")
)
server <- function(input, output, session) {
output$text <- renderText({
"Hello World!"
})
output$code <- renderPrint({
summary(c(1, 2, 3, 4))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tableOutput("static")
)
server <- function(input, output, session) {
output$static <- renderTable({
head(mtcars)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
dataTableOutput("dynamic")
)
server <- function(input, output, session) {
output$dynamic <- renderDataTable({
mtcars
})
}
shinyApp(ui = ui, server = server)
renderDataTable({ mtcars }, options = list(pageLength = 5))
renderDataTable({ mtcars }, options = list(pageLength = 5))
library(shiny)
ui <- fluidPage(
dataTableOutput("dynamic")
)
server <- function(input, output, session) {
output$dynamic <- renderDataTable({ mtcars }, options = list(pageLength = 5))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", width = "40%")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
}, width = 100, height = 250)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
}, width = 250, height = 150)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", width = 40%)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", width = "40%")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", height = "300px", width = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
theme_bw() +
xlab("Displacement") +
ylab("Highway MPG")
})
}
shinyApp(ui = ui, server = server)
shinyapp
library(shiny)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
plotOutput("plot"),
varSelectInput("var2", "Pick the Y variable", data = mtcars)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = hp),
plotOutput("plot")
)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = mtcars$hp),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = "hp"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = "hp"),
radioButtons("color", "What color do you want",
choiceNames = c("Red", "Blue"),
choiceValues = c("red", "blue"))
plotOutput("plot")
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = "hp"),
radioButtons("color", "What color do you want",
choiceNames = c("Red", "Blue"),
choiceValues = c("red", "blue")),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point()+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
varSelectInput("var1", "Pick the X variable", data = mtcars),
varSelectInput("var2", "Pick the Y variable", data = mtcars, selected = "hp"),
radioButtons("color", "What color do you want",
choiceNames = c("Red", "Blue"),
choiceValues = c("red", "blue")),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(x = !!input$var1, y = !!input$var2))+
geom_point(color = input$color)+
ggtitle("My Plot")
})
}
shinyApp(ui, server)
